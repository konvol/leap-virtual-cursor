{"ast":null,"code":"var BaseConnection = module.exports = require('./base');\n\nvar BrowserConnection = module.exports = function (opts) {\n  BaseConnection.call(this, opts);\n  var connection = this;\n  this.on('ready', function () {\n    connection.startFocusLoop();\n  });\n  this.on('disconnect', function () {\n    connection.stopFocusLoop();\n  });\n};\n\nObject.assign(BrowserConnection.prototype, BaseConnection.prototype);\nBrowserConnection.__proto__ = BaseConnection;\n\nBrowserConnection.prototype.useSecure = function () {\n  return location.protocol === 'https:';\n};\n\nBrowserConnection.prototype.getScheme = function () {\n  return this.useSecure() ? 'wss:' : 'ws:';\n};\n\nBrowserConnection.prototype.getPort = function () {\n  return this.useSecure() ? 6436 : 6437;\n};\n\nBrowserConnection.prototype.setupSocket = function () {\n  var connection = this;\n  var socket = new WebSocket(this.getUrl());\n\n  socket.onopen = function () {\n    connection.handleOpen();\n  };\n\n  socket.onclose = function (data) {\n    connection.handleClose(data['code'], data['reason']);\n  };\n\n  socket.onmessage = function (message) {\n    connection.handleData(message.data);\n  };\n\n  socket.onerror = function (error) {\n    // attempt to degrade to ws: after one failed attempt for older Leap Service installations.\n    if (connection.useSecure() && connection.scheme === 'wss:') {\n      connection.scheme = 'ws:';\n      connection.port = 6437;\n      connection.disconnect();\n      connection.connect();\n    }\n  };\n\n  return socket;\n};\n\nBrowserConnection.prototype.startFocusLoop = function () {\n  if (this.focusDetectorTimer) return;\n  var connection = this;\n  var propertyName = null;\n\n  if (typeof document.hidden !== \"undefined\") {\n    propertyName = \"hidden\";\n  } else if (typeof document.mozHidden !== \"undefined\") {\n    propertyName = \"mozHidden\";\n  } else if (typeof document.msHidden !== \"undefined\") {\n    propertyName = \"msHidden\";\n  } else if (typeof document.webkitHidden !== \"undefined\") {\n    propertyName = \"webkitHidden\";\n  } else {\n    propertyName = undefined;\n  }\n\n  if (connection.windowVisible === undefined) {\n    connection.windowVisible = propertyName === undefined ? true : document[propertyName] === false;\n  }\n\n  var focusListener = window.addEventListener('focus', function (e) {\n    connection.windowVisible = true;\n    updateFocusState();\n  });\n  var blurListener = window.addEventListener('blur', function (e) {\n    connection.windowVisible = false;\n    updateFocusState();\n  });\n  this.on('disconnect', function () {\n    window.removeEventListener('focus', focusListener);\n    window.removeEventListener('blur', blurListener);\n  });\n\n  var updateFocusState = function () {\n    var isVisible = propertyName === undefined ? true : document[propertyName] === false;\n    connection.reportFocus(isVisible && connection.windowVisible);\n  }; // save 100ms when resuming focus\n\n\n  updateFocusState();\n  this.focusDetectorTimer = setInterval(updateFocusState, 100);\n};\n\nBrowserConnection.prototype.stopFocusLoop = function () {\n  if (!this.focusDetectorTimer) return;\n  clearTimeout(this.focusDetectorTimer);\n  delete this.focusDetectorTimer;\n};","map":null,"metadata":{},"sourceType":"script"}