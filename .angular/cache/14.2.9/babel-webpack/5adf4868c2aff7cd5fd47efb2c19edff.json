{"ast":null,"code":"var Pointable = require('./pointable'),\n    Bone = require('./bone'),\n    Dialog = require('./dialog');\n/**\r\n* Constructs a Finger object.\r\n*\r\n* An uninitialized finger is considered invalid.\r\n* Get valid Finger objects from a Frame or a Hand object.\r\n*\r\n* @class Finger\r\n* @memberof Leap\r\n* @classdesc\r\n* The Finger class reports the physical characteristics of a finger.\r\n*\r\n* Both fingers are classified as Pointable objects. Use the\r\n* Pointable.tool property to determine whether a Pointable object represents a\r\n* tool or finger. The Leap classifies a detected entity as a tool when it is\r\n* thinner, straighter, and longer than a typical finger.\r\n*\r\n* Note that Finger objects can be invalid, which means that they do not\r\n* contain valid tracking data and do not correspond to a physical entity.\r\n* Invalid Finger objects can be the result of asking for a Finger object\r\n* using an ID from an earlier frame when no Finger objects with that ID\r\n* exist in the current frame. A Finger object created from the Finger\r\n* constructor is also invalid. Test for validity with the Pointable.valid\r\n* property.\r\n*/\n\n\nvar Finger = module.exports = function (data) {\n  Pointable.call(this, data); // use pointable as super-constructor\n\n  /**\r\n  * The position of the distal interphalangeal joint of the finger.\r\n  * This joint is closest to the tip.\r\n  * \r\n  * The distal interphalangeal joint is located between the most extreme segment\r\n  * of the finger (the distal phalanx) and the middle segment (the medial\r\n  * phalanx).\r\n  *\r\n  * @member dipPosition\r\n  * @type {number[]}\r\n  * @memberof Leap.Finger.prototype\r\n  */\n\n  this.dipPosition = data.dipPosition;\n  /**\r\n  * The position of the proximal interphalangeal joint of the finger. This joint is the middle\r\n  * joint of a finger.\r\n  *\r\n  * The proximal interphalangeal joint is located between the two finger segments\r\n  * closest to the hand (the proximal and the medial phalanges). On a thumb,\r\n  * which lacks an medial phalanx, this joint index identifies the knuckle joint\r\n  * between the proximal phalanx and the metacarpal bone.\r\n  *\r\n  * @member pipPosition\r\n  * @type {number[]}\r\n  * @memberof Leap.Finger.prototype\r\n  */\n\n  this.pipPosition = data.pipPosition;\n  /**\r\n  * The position of the metacarpopophalangeal joint, or knuckle, of the finger.\r\n  *\r\n  * The metacarpopophalangeal joint is located at the base of a finger between\r\n  * the metacarpal bone and the first phalanx. The common name for this joint is\r\n  * the knuckle.\r\n  *\r\n  * On a thumb, which has one less phalanx than a finger, this joint index\r\n  * identifies the thumb joint near the base of the hand, between the carpal\r\n  * and metacarpal bones.\r\n  *\r\n  * @member mcpPosition\r\n  * @type {number[]}\r\n  * @memberof Leap.Finger.prototype\r\n  */\n\n  this.mcpPosition = data.mcpPosition;\n  /**\r\n   * The position of the Carpometacarpal joint\r\n   *\r\n   * This is at the distal end of the wrist, and has no common name.\r\n   *\r\n   */\n\n  this.carpPosition = data.carpPosition;\n  /**\r\n  * Whether or not this finger is in an extended posture.\r\n  *\r\n  * A finger is considered extended if it is extended straight from the hand as if\r\n  * pointing. A finger is not extended when it is bent down and curled towards the \r\n  * palm.\r\n  * @member extended\r\n  * @type {Boolean}\r\n  * @memberof Leap.Finger.prototype\r\n  */\n\n  this.extended = data.extended;\n  /**\r\n  * An integer code for the name of this finger.\r\n  * \r\n  * * 0 -- thumb\r\n  * * 1 -- index finger\r\n  * * 2 -- middle finger\r\n  * * 3 -- ring finger\r\n  * * 4 -- pinky\r\n  *\r\n  * @member type\r\n  * @type {number}\r\n  * @memberof Leap.Finger.prototype\r\n  */\n\n  this.type = data.type;\n  this.finger = true;\n  /**\r\n  * The joint positions of this finger as an array in the order base to tip.\r\n  *\r\n  * @member positions\r\n  * @type {array[]}\r\n  * @memberof Leap.Finger.prototype\r\n  */\n\n  this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];\n\n  if (data.bases) {\n    this.addBones(data);\n  } else {\n    Dialog.warnBones();\n  }\n};\n\nObject.assign(Finger.prototype, Pointable.prototype);\n\nFinger.prototype.addBones = function (data) {\n  /**\r\n  * Four bones per finger, from wrist outwards:\r\n  * metacarpal, proximal, medial, and distal.\r\n  *\r\n  * See http://en.wikipedia.org/wiki/Interphalangeal_articulations_of_hand\r\n  */\n  this.metacarpal = new Bone(this, {\n    type: 0,\n    width: this.width,\n    prevJoint: this.carpPosition,\n    nextJoint: this.mcpPosition,\n    basis: data.bases[0]\n  });\n  this.proximal = new Bone(this, {\n    type: 1,\n    width: this.width,\n    prevJoint: this.mcpPosition,\n    nextJoint: this.pipPosition,\n    basis: data.bases[1]\n  });\n  this.medial = new Bone(this, {\n    type: 2,\n    width: this.width,\n    prevJoint: this.pipPosition,\n    nextJoint: this.dipPosition,\n    basis: data.bases[2]\n  });\n  /**\r\n   * Note that the `distal.nextJoint` position is slightly different from the `finger.tipPosition`.\r\n   * The former is at the very end of the bone, where the latter is the center of a sphere positioned at\r\n   * the tip of the finger.  The btipPosition \"bone tip position\" is a few mm closer to the wrist than\r\n   * the tipPosition.\r\n   * @type {Bone}\r\n   */\n\n  this.distal = new Bone(this, {\n    type: 3,\n    width: this.width,\n    prevJoint: this.dipPosition,\n    nextJoint: data.btipPosition,\n    basis: data.bases[3]\n  });\n  this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];\n};\n\nFinger.prototype.toString = function () {\n  return \"Finger [ id:\" + this.id + \" \" + this.length + \"mmx | width:\" + this.width + \"mm | direction:\" + this.direction + ' ]';\n};\n\nFinger.Invalid = {\n  valid: false\n};","map":null,"metadata":{},"sourceType":"script"}