{"ast":null,"code":"var glMatrix = require(\"gl-matrix\"),\n    vec3 = glMatrix.vec3;\n/**\r\n * Constructs a InteractionBox object.\r\n *\r\n * @class InteractionBox\r\n * @memberof Leap\r\n * @classdesc\r\n * The InteractionBox class represents a box-shaped region completely within\r\n * the field of view of the Leap Motion controller.\r\n *\r\n * The interaction box is an axis-aligned rectangular prism and provides\r\n * normalized coordinates for hands, fingers, and tools within this box.\r\n * The InteractionBox class can make it easier to map positions in the\r\n * Leap Motion coordinate system to 2D or 3D coordinate systems used\r\n * for application drawing.\r\n *\r\n * ![Interaction Box](images/Leap_InteractionBox.png)\r\n *\r\n * The InteractionBox region is defined by a center and dimensions along the x, y, and z axes.\r\n */\n\n\nvar InteractionBox = module.exports = function (data) {\n  /**\r\n   * Indicates whether this is a valid InteractionBox object.\r\n   *\r\n   * @member valid\r\n   * @type {Boolean}\r\n   * @memberof Leap.InteractionBox.prototype\r\n   */\n  this.valid = true;\n  /**\r\n   * The center of the InteractionBox in device coordinates (millimeters).\r\n   * This point is equidistant from all sides of the box.\r\n   *\r\n   * @member center\r\n   * @type {number[]}\r\n   * @memberof Leap.InteractionBox.prototype\r\n   */\n\n  this.center = data.center;\n  this.size = data.size;\n  /**\r\n   * The width of the InteractionBox in millimeters, measured along the x-axis.\r\n   *\r\n   * @member width\r\n   * @type {number}\r\n   * @memberof Leap.InteractionBox.prototype\r\n   */\n\n  this.width = data.size[0];\n  /**\r\n   * The height of the InteractionBox in millimeters, measured along the y-axis.\r\n   *\r\n   * @member height\r\n   * @type {number}\r\n   * @memberof Leap.InteractionBox.prototype\r\n   */\n\n  this.height = data.size[1];\n  /**\r\n   * The depth of the InteractionBox in millimeters, measured along the z-axis.\r\n   *\r\n   * @member depth\r\n   * @type {number}\r\n   * @memberof Leap.InteractionBox.prototype\r\n   */\n\n  this.depth = data.size[2];\n};\n/**\r\n * Converts a position defined by normalized InteractionBox coordinates\r\n * into device coordinates in millimeters.\r\n *\r\n * This function performs the inverse of normalizePoint().\r\n *\r\n * @method denormalizePoint\r\n * @memberof Leap.InteractionBox.prototype\r\n * @param {number[]} normalizedPosition The input position in InteractionBox coordinates.\r\n * @returns {number[]} The corresponding denormalized position in device coordinates.\r\n */\n\n\nInteractionBox.prototype.denormalizePoint = function (normalizedPosition) {\n  return vec3.fromValues((normalizedPosition[0] - 0.5) * this.size[0] + this.center[0], (normalizedPosition[1] - 0.5) * this.size[1] + this.center[1], (normalizedPosition[2] - 0.5) * this.size[2] + this.center[2]);\n};\n/**\r\n * Normalizes the coordinates of a point using the interaction box.\r\n *\r\n * Coordinates from the Leap Motion frame of reference (millimeters) are\r\n * converted to a range of [0..1] such that the minimum value of the\r\n * InteractionBox maps to 0 and the maximum value of the InteractionBox maps to 1.\r\n *\r\n * @method normalizePoint\r\n * @memberof Leap.InteractionBox.prototype\r\n * @param {number[]} position The input position in device coordinates.\r\n * @param {Boolean} clamp Whether or not to limit the output value to the range [0,1]\r\n * when the input position is outside the InteractionBox. Defaults to true.\r\n * @returns {number[]} The normalized position.\r\n */\n\n\nInteractionBox.prototype.normalizePoint = function (position, clamp) {\n  var vec = vec3.fromValues((position[0] - this.center[0]) / this.size[0] + 0.5, (position[1] - this.center[1]) / this.size[1] + 0.5, (position[2] - this.center[2]) / this.size[2] + 0.5);\n\n  if (clamp) {\n    vec[0] = Math.min(Math.max(vec[0], 0), 1);\n    vec[1] = Math.min(Math.max(vec[1], 0), 1);\n    vec[2] = Math.min(Math.max(vec[2], 0), 1);\n  }\n\n  return vec;\n};\n/**\r\n * Writes a brief, human readable description of the InteractionBox object.\r\n *\r\n * @method toString\r\n * @memberof Leap.InteractionBox.prototype\r\n * @returns {String} A description of the InteractionBox object as a string.\r\n */\n\n\nInteractionBox.prototype.toString = function () {\n  return \"InteractionBox [ width:\" + this.width + \" | height:\" + this.height + \" | depth:\" + this.depth + \" ]\";\n};\n/**\r\n * An invalid InteractionBox object.\r\n *\r\n * You can use this InteractionBox instance in comparisons testing\r\n * whether a given InteractionBox instance is valid or invalid. (You can also use the\r\n * InteractionBox.valid property.)\r\n *\r\n * @static\r\n * @type {Leap.InteractionBox}\r\n * @name Invalid\r\n * @memberof Leap.InteractionBox\r\n */\n\n\nInteractionBox.Invalid = {\n  valid: false\n};","map":null,"metadata":{},"sourceType":"script"}