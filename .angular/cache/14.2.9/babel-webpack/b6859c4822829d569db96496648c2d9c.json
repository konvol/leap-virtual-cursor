{"ast":null,"code":"var chooseProtocol = require('../protocol').chooseProtocol,\n    EventEmitter = require('events').EventEmitter;\n\nvar BaseConnection = module.exports = function (opts) {\n  this.opts = Object.assign({\n    host: '127.0.0.1',\n    scheme: this.getScheme(),\n    port: this.getPort(),\n    background: false,\n    optimizeHMD: false,\n    requestProtocolVersion: BaseConnection.defaultProtocolVersion\n  }, opts || {});\n  this.host = this.opts.host;\n  this.port = this.opts.port;\n  this.scheme = this.opts.scheme;\n  this.protocolVersionVerified = false;\n  this.background = null;\n  this.optimizeHMD = null;\n  this.on('ready', function () {\n    this.setBackground(this.opts.background);\n    this.setOptimizeHMD(this.opts.optimizeHMD);\n\n    if (this.opts.optimizeHMD) {\n      console.log(\"Optimized for head mounted display usage.\");\n    } else {\n      console.log(\"Optimized for desktop usage.\");\n    }\n  });\n}; // The latest available:\n\n\nBaseConnection.defaultProtocolVersion = 6;\n\nBaseConnection.prototype.getUrl = function () {\n  return this.scheme + \"//\" + this.host + \":\" + this.port + \"/v\" + this.opts.requestProtocolVersion + \".json\";\n};\n\nBaseConnection.prototype.getScheme = function () {\n  return 'ws:';\n};\n\nBaseConnection.prototype.getPort = function () {\n  return 6437;\n};\n\nBaseConnection.prototype.setBackground = function (state) {\n  this.opts.background = state;\n\n  if (this.protocol && this.protocol.sendBackground && this.background !== this.opts.background) {\n    this.background = this.opts.background;\n    this.protocol.sendBackground(this, this.opts.background);\n  }\n};\n\nBaseConnection.prototype.setOptimizeHMD = function (state) {\n  this.opts.optimizeHMD = state;\n\n  if (this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD) {\n    this.optimizeHMD = this.opts.optimizeHMD;\n    this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD);\n  }\n};\n\nBaseConnection.prototype.handleOpen = function () {\n  if (!this.connected) {\n    this.connected = true;\n    this.emit('connect');\n  }\n};\n\nBaseConnection.prototype.handleClose = function (code, reason) {\n  if (!this.connected) return;\n  this.disconnect(); // 1001 - an active connection is closed\n  // 1006 - cannot connect\n\n  if (code === 1001 && this.opts.requestProtocolVersion > 1) {\n    if (this.protocolVersionVerified) {\n      this.protocolVersionVerified = false;\n    } else {\n      this.opts.requestProtocolVersion--;\n    }\n  }\n\n  this.startReconnection();\n};\n\nBaseConnection.prototype.startReconnection = function () {\n  var connection = this;\n\n  if (!this.reconnectionTimer) {\n    this.reconnectionTimer = setInterval(function () {\n      connection.reconnect();\n    }, 500);\n  }\n};\n\nBaseConnection.prototype.stopReconnection = function () {\n  this.reconnectionTimer = clearInterval(this.reconnectionTimer);\n}; // By default, disconnect will prevent auto-reconnection.\n// Pass in true to allow the reconnection loop not be interrupted continue\n\n\nBaseConnection.prototype.disconnect = function (allowReconnect) {\n  if (!allowReconnect) this.stopReconnection();\n  if (!this.socket) return;\n  this.socket.close();\n  delete this.socket;\n  delete this.protocol;\n  delete this.background; // This is not persisted when reconnecting to the web socket server\n\n  delete this.optimizeHMD;\n  delete this.focusedState;\n\n  if (this.connected) {\n    this.connected = false;\n    this.emit('disconnect');\n  }\n\n  return true;\n};\n\nBaseConnection.prototype.reconnect = function () {\n  if (this.connected) {\n    this.stopReconnection();\n  } else {\n    this.disconnect(true);\n    this.connect();\n  }\n};\n\nBaseConnection.prototype.handleData = function (data) {\n  var message = JSON.parse(data);\n  var messageEvent;\n\n  if (this.protocol === undefined) {\n    messageEvent = this.protocol = chooseProtocol(message);\n    this.protocolVersionVerified = true;\n    this.emit('ready');\n  } else {\n    messageEvent = this.protocol(message);\n  }\n\n  this.emit(messageEvent.type, messageEvent);\n};\n\nBaseConnection.prototype.connect = function () {\n  if (this.socket) return;\n  this.socket = this.setupSocket();\n  return true;\n};\n\nBaseConnection.prototype.send = function (data) {\n  this.socket.send(data);\n};\n\nBaseConnection.prototype.reportFocus = function (state) {\n  if (!this.connected || this.focusedState === state) return;\n  this.focusedState = state;\n  this.emit(this.focusedState ? 'focus' : 'blur');\n\n  if (this.protocol && this.protocol.sendFocused) {\n    this.protocol.sendFocused(this, this.focusedState);\n  }\n};\n\nObject.assign(BaseConnection.prototype, EventEmitter.prototype);","map":null,"metadata":{},"sourceType":"script"}