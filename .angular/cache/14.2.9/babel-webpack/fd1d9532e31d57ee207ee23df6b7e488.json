{"ast":null,"code":"/**\r\n * Leap is the global namespace of the Leap API.\r\n * @namespace Leap\r\n */\nmodule.exports = {\n  Controller: require(\"./controller\"),\n  Frame: require(\"./frame\"),\n  Hand: require(\"./hand\"),\n  Pointable: require(\"./pointable\"),\n  Finger: require(\"./finger\"),\n  InteractionBox: require(\"./interaction_box\"),\n  CircularBuffer: require(\"./circular_buffer\"),\n  UI: require(\"./ui\"),\n  JSONProtocol: require(\"./protocol\").JSONProtocol,\n  glMatrix: require(\"gl-matrix\"),\n  mat3: require(\"gl-matrix\").mat3,\n  vec3: require(\"gl-matrix\").vec3,\n  loopController: undefined,\n  version: require('./version.js'),\n\n  /**\r\n   * Expose utility libraries for convenience\r\n   * Use carefully - they may be subject to upgrade or removal in different versions of LeapJS.\r\n   */\n  EventEmitter: require('events').EventEmitter,\n\n  /**\r\n   * The Leap.loop() function passes a frame of Leap data to your\r\n   * callback function and then calls window.requestAnimationFrame() after\r\n   * executing your callback function.\r\n   *\r\n   * Leap.loop() sets up the Leap controller and WebSocket connection for you.\r\n   * You do not need to create your own controller when using this method.\r\n   *\r\n   * Your callback function is called on an interval determined by the client\r\n   * browser. Typically, this is on an interval of 60 frames/second. The most\r\n   * recent frame of Leap data is passed to your callback function. If the Leap\r\n   * is producing frames at a slower rate than the browser frame rate, the same\r\n   * frame of Leap data can be passed to your function in successive animation\r\n   * updates.\r\n   *\r\n   * As an alternative, you can create your own Controller object and use a\r\n   * {@link Controller#onFrame onFrame} callback to process the data at\r\n   * the frame rate of the Leap device. See {@link Controller} for an\r\n   * example.\r\n   *\r\n   * @method Leap.loop\r\n   * @param {function} callback A function called when the browser is ready to\r\n   * draw to the screen. The most recent {@link Frame} object is passed to\r\n   * your callback function.\r\n   *\r\n   * ```javascript\r\n   *    Leap.loop( function( frame ) {\r\n   *        // ... your code here\r\n   *    })\r\n   * ```\r\n   */\n  loop: function (opts, callback) {\n    if (opts && callback === undefined && {}.toString.call(opts) === '[object Function]') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (this.loopController) {\n      if (opts) {\n        this.loopController.setupFrameEvents(opts);\n      }\n    } else {\n      this.loopController = new this.Controller(opts);\n    }\n\n    this.loopController.loop(callback);\n    return this.loopController;\n  },\n\n  /*\r\n   * Convenience method for Leap.Controller.plugin\r\n   */\n  plugin: function (name, options) {\n    this.Controller.plugin(name, options);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}