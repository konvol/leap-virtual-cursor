{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar Region = module.exports = function (start, end) {\n  this.start = new Vector(start);\n  this.end = new Vector(end);\n  this.enteredFrame = null;\n};\n\nRegion.prototype.hasPointables = function (frame) {\n  for (var i = 0; i != frame.pointables.length; i++) {\n    var position = frame.pointables[i].tipPosition;\n\n    if (position.x >= this.start.x && position.x <= this.end.x && position.y >= this.start.y && position.y <= this.end.y && position.z >= this.start.z && position.z <= this.end.z) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nRegion.prototype.listener = function (opts) {\n  var region = this;\n  if (opts && opts.nearThreshold) this.setupNearRegion(opts.nearThreshold);\n  return function (frame) {\n    return region.updatePosition(frame);\n  };\n};\n\nRegion.prototype.clipper = function () {\n  var region = this;\n  return function (frame) {\n    region.updatePosition(frame);\n    return region.enteredFrame ? frame : null;\n  };\n};\n\nRegion.prototype.setupNearRegion = function (distance) {\n  var nearRegion = this.nearRegion = new Region([this.start.x - distance, this.start.y - distance, this.start.z - distance], [this.end.x + distance, this.end.y + distance, this.end.z + distance]);\n  var region = this;\n  nearRegion.on(\"enter\", function (frame) {\n    region.emit(\"near\", frame);\n  });\n  nearRegion.on(\"exit\", function (frame) {\n    region.emit(\"far\", frame);\n  });\n  region.on('exit', function (frame) {\n    region.emit(\"near\", frame);\n  });\n};\n\nRegion.prototype.updatePosition = function (frame) {\n  if (this.nearRegion) this.nearRegion.updatePosition(frame);\n\n  if (this.hasPointables(frame) && this.enteredFrame == null) {\n    this.enteredFrame = frame;\n    this.emit(\"enter\", this.enteredFrame);\n  } else if (!this.hasPointables(frame) && this.enteredFrame != null) {\n    this.enteredFrame = null;\n    this.emit(\"exit\", this.enteredFrame);\n  }\n\n  return frame;\n};\n\nRegion.prototype.normalize = function (position) {\n  return new Vector([(position.x - this.start.x) / (this.end.x - this.start.x), (position.y - this.start.y) / (this.end.y - this.start.y), (position.z - this.start.z) / (this.end.z - this.start.z)]);\n};\n\nRegion.prototype.mapToXY = function (position, width, height) {\n  var normalized = this.normalize(position);\n  var x = normalized.x,\n      y = normalized.y;\n  if (x > 1) x = 1;else if (x < -1) x = -1;\n  if (y > 1) y = 1;else if (y < -1) y = -1;\n  return [(x + 1) / 2 * width, (1 - y) / 2 * height, normalized.z];\n};\n\nObject.assign(Region.prototype, EventEmitter.prototype);","map":null,"metadata":{},"sourceType":"script"}