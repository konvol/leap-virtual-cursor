{"ast":null,"code":"var Frame = require('./frame'),\n    EventEmitter = require('events').EventEmitter;\n\nvar Event = function (data) {\n  this.type = data.type;\n  this.state = data.state;\n};\n\nexports.chooseProtocol = function (header) {\n  var protocol;\n\n  switch (header.version) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      protocol = JSONProtocol(header);\n\n      protocol.sendBackground = function (connection, state) {\n        connection.send(protocol.encode({\n          background: state\n        }));\n      };\n\n      protocol.sendFocused = function (connection, state) {\n        connection.send(protocol.encode({\n          focused: state\n        }));\n      };\n\n      protocol.sendOptimizeHMD = function (connection, state) {\n        connection.send(protocol.encode({\n          optimizeHMD: state\n        }));\n      };\n\n      break;\n\n    default:\n      throw \"unrecognized version\";\n  }\n\n  return protocol;\n};\n\nvar JSONProtocol = exports.JSONProtocol = function (header) {\n  var protocol = function (frameData) {\n    if (frameData.event) {\n      return new Event(frameData.event);\n    } else {\n      protocol.emit('beforeFrameCreated', frameData);\n      var frame = new Frame(frameData);\n      protocol.emit('afterFrameCreated', frame, frameData);\n      return frame;\n    }\n  };\n\n  protocol.encode = function (message) {\n    return JSON.stringify(message);\n  };\n\n  protocol.version = header.version;\n  protocol.serviceVersion = header.serviceVersion;\n  protocol.versionLong = 'Version ' + header.version;\n  protocol.type = 'protocol';\n  Object.assign(protocol, EventEmitter.prototype);\n  return protocol;\n};","map":null,"metadata":{},"sourceType":"script"}